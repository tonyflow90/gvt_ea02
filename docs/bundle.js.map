{"version":3,"file":"bundle.js","sources":["../src/main.js"],"sourcesContent":["let canvas, gl;\r\nlet aVertices = [];\r\n\r\n// let kontur_vertices = new Float32Array([\r\n//     290, 20, 241, 30, 195, 48, 154, 77, 127, 119, 111, 166, 120, 211, 103, 257, 84, 302, 67, 349, 63, 397, 85, 443, 106, 488, 127, 533, 172, 543, 222, 538, 271, 530, 321, 531, 371, 538, 421, 543, 467, 536, 487, 490, 507, 444, 527, 398, 522, 349, 506, 302, 489, 255, 470, 216, 480, 170, 470, 121, 441, 81, 401, 51, 355, 32, 307, 20\r\n// ]);\r\n\r\n// let vertices1 = kontur_vertices.map(x => {\r\n//     // x=x*2;\r\n//     if (kontur_vertices.indexOf(x) % 2) {\r\n//         // console.log(x);\r\n//         x = x * -1;\r\n//     } else {\r\n//         x = x - 300;\r\n//     }\r\n//     return x;\r\n// });\r\n\r\n// let visor_vertices = new Float32Array([\r\n//     130, 210, 146, 256, 190, 263, 231, 235, 272, 208, 320, 208, 363, 232, 405, 261, 447, 258, 466, 213, 422, 205, 372, 202, 322, 200, 272, 201, 222, 202, 172, 203\r\n// ]);\r\n\r\n// let vertices2 = visor_vertices.map(x => {\r\n//     // x=x*2;\r\n//     if (visor_vertices.indexOf(x) % 2) {\r\n//         // console.log(x);\r\n//         x = x * -1;\r\n//     } else {\r\n//         x = x - 300;\r\n//     }\r\n//     return x;\r\n// });\r\n\r\ndocument.body.onload = _ => {\r\n    canvas = document.querySelector('#canvas');\r\n    gl = canvas.getContext('webgl');\r\n\r\n    // Pipeline setup\r\n    gl.clearColor(.25, .35, .45, 1);\r\n\r\n    let verticies = createVertices(16);\r\n\r\n    draw(gl.LINE_STRIP, 0, verticies.length, verticies);\r\n};\r\n\r\nlet createVertices = (nCount=8) => {\r\n    let vertices = [];\r\n    let triangleCount = nCount;\r\n    let r = 1;\r\n    let g = 2 * Math.PI / triangleCount;\r\n\r\n    for (let i = 0; i < triangleCount; i += 1) {\r\n        r = Math.random() * .5 + .5;\r\n        let x1 = 0;\r\n        let y1 = 0;\r\n\r\n        let x2 = r * Math.cos(g * i);\r\n        let y2 = r * Math.sin(g * i);\r\n\r\n        let x3 = r * Math.cos(g * (i + 1));\r\n        let y3 = r * Math.sin(g * (i + 1));\r\n\r\n        vertices = [...vertices, x1, y1, x2, y2, x3, y3];\r\n    }\r\n\r\n    return new Float32Array(vertices);\r\n}\r\n\r\nlet draw = (mode, nStart = 0, nEnd = 0, aVertices) => {\r\n\r\n    // Compile a vertex shader\r\n    let vsSource = 'attribute vec2 pos;' +\r\n        'void main(){ gl_Position = vec4(pos, 0, 1); }';\r\n    let vs = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(vs, vsSource);\r\n    gl.compileShader(vs);\r\n\r\n    // Compile a fragment shader\r\n    let fsSouce = 'void main() { gl_FragColor = vec4(0,0,0,1); }';\r\n    let fs = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(fs, fsSouce);\r\n    gl.compileShader(fs);\r\n\r\n    // Link together into a program\r\n    let prog = gl.createProgram();\r\n    gl.attachShader(prog, vs);\r\n    gl.attachShader(prog, fs);\r\n    gl.linkProgram(prog);\r\n    gl.useProgram(prog);\r\n\r\n\r\n    let vbo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\r\n    gl.bufferData(gl.ARRAY_BUFFER, aVertices, gl.STATIC_DRAW);\r\n\r\n    // Bind vertex buffer to attribute letiable\r\n    let coordinatesAttrib = gl.getAttribLocation(prog, 'pos');\r\n    gl.vertexAttribPointer(coordinatesAttrib, 2, gl.FLOAT, false, 0, 0);\r\n    gl.enableVertexAttribArray(coordinatesAttrib);\r\n\r\n    // Clear framebuffer and render primitives\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.drawArrays(mode, nStart, nEnd);\r\n\r\n}"],"names":["canvas","gl","document","body","onload","_","querySelector","getContext","clearColor","verticies","createVertices","draw","LINE_STRIP","length","nCount","vertices","triangleCount","r","g","Math","PI","i","random","x1","y1","x2","cos","y2","sin","x3","y3","Float32Array","mode","nStart","nEnd","aVertices","vs","createShader","VERTEX_SHADER","shaderSource","compileShader","fs","FRAGMENT_SHADER","prog","createProgram","attachShader","linkProgram","useProgram","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coordinatesAttrib","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","clear","COLOR_BUFFER_BIT","drawArrays"],"mappings":"yBAAA,IAAIA,EAAQC,EAiCZC,SAASC,KAAKC,OAASC,IACnBL,EAASE,SAASI,cAAc,WAChCL,EAAKD,EAAOO,WAAW,SAGvBN,EAAGO,WAAW,IAAK,IAAK,IAAK,GAE7B,IAAIC,EAAYC,EAAe,IAE/BC,EAAKV,EAAGW,WAAY,EAAGH,EAAUI,OAAQJ,IAG7C,IAAIC,EAAiB,CAACI,EAAO,KACzB,IAAIC,EAAW,GACXC,EAAgBF,EAChBG,EAAI,EACJC,EAAI,EAAIC,KAAKC,GAAKJ,EAEtB,IAAK,IAAIK,EAAI,EAAGA,EAAIL,EAAeK,GAAK,EAAG,CACvCJ,EAAoB,GAAhBE,KAAKG,SAAgB,GACzB,IAAIC,EAAK,EACLC,EAAK,EAELC,EAAKR,EAAIE,KAAKO,IAAIR,EAAIG,GACtBM,EAAKV,EAAIE,KAAKS,IAAIV,EAAIG,GAEtBQ,EAAKZ,EAAIE,KAAKO,IAAIR,GAAKG,EAAI,IAC3BS,EAAKb,EAAIE,KAAKS,IAAIV,GAAKG,EAAI,IAE/BN,EAAW,IAAIA,EAAUQ,EAAIC,EAAIC,EAAIE,EAAIE,EAAIC,GAGjD,OAAO,IAAIC,aAAahB,IAGxBJ,EAAO,CAACqB,EAAMC,EAAS,EAAGC,EAAO,EAAGC,KAGpC,IAEIC,EAAKnC,EAAGoC,aAAapC,EAAGqC,eAC5BrC,EAAGsC,aAAaH,EAHD,oEAIfnC,EAAGuC,cAAcJ,GAGjB,IACIK,EAAKxC,EAAGoC,aAAapC,EAAGyC,iBAC5BzC,EAAGsC,aAAaE,EAFF,iDAGdxC,EAAGuC,cAAcC,GAGjB,IAAIE,EAAO1C,EAAG2C,gBACd3C,EAAG4C,aAAaF,EAAMP,GACtBnC,EAAG4C,aAAaF,EAAMF,GACtBxC,EAAG6C,YAAYH,GACf1C,EAAG8C,WAAWJ,GAGd,IAAIK,EAAM/C,EAAGgD,eACbhD,EAAGiD,WAAWjD,EAAGkD,aAAcH,GAC/B/C,EAAGmD,WAAWnD,EAAGkD,aAAchB,EAAWlC,EAAGoD,aAG7C,IAAIC,EAAoBrD,EAAGsD,kBAAkBZ,EAAM,OACnD1C,EAAGuD,oBAAoBF,EAAmB,EAAGrD,EAAGwD,OAAO,EAAO,EAAG,GACjExD,EAAGyD,wBAAwBJ,GAG3BrD,EAAG0D,MAAM1D,EAAG2D,kBACZ3D,EAAG4D,WAAW7B,EAAMC,EAAQC"}